# data-ingestion-rust/Cargo.toml
[package]
name = "data-ingestion-rust"
version = "0.1.0"
edition = "2021"

[dependencies]
tokio = { version = "1", features = ["full"] } # Async runtime, all features
serde = { version = "1.0", features = ["derive"] } # Serialization/Deserialization
serde_json = "1.0" # JSON handling
config = { version = "0.14", features = ["toml", "yaml", "env"] } # Configuration management
log = "0.4" # Logging facade
env_logger = "0.11" # Logging implementation
futures = "0.3" # Async utilities (SinkExt, StreamExt)
tokio-tungstenite = { version = "0.21", features = ["native-tls"] } # Async WebSocket client
# Alternatively, use "rustls-tls" feature if you prefer Rustls over native TLS
# tokio-tungstenite = { version = "0.21", features = ["rustls-tls-native-roots"] }
url = "2.5" # URL parsing
thiserror = "1.0" # Error handling helper
async-trait = "0.1" # Async traits
prost = "0.12" # Protobuf code generation (runtime)
tonic = "0.11" # gRPC framework (runtime)
uuid = { version = "1.7", features = ["v4", "serde"] } # For generating unique IDs
chrono = { version = "0.4", features = ["serde"] } # Date/time handling
bytes = "1" # Utilities for working with bytes

# Alpaca REST API client (optional but useful for orders, account info)
# Check for actively maintained forks or alternatives if needed.
# Using a placeholder, you might need to find or build a suitable crate.
# alpaca-rs = { git = "https://github.com/some-maintained-fork/alpaca-rs" } # Example
reqwest = { version = "0.12", features = ["json", "rustls-tls"], default-features = false } # HTTP Client (fallback for REST)


# Internal communication channel (alternative to direct gRPC calls in some patterns)
# crossbeam-channel = "0.5"

[build-dependencies]
tonic-build = "0.11" # gRPC code generation (build time)
