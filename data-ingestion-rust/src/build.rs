// data-ingestion-rust/build.rs
// This script compiles Protocol Buffer definitions using tonic_build
// It assumes your .proto files are in a directory like ../../proto/
// Adjust the path according to your monorepo structure.

use std::io::Result;

fn main() -> Result<()> {
    println!("cargo:rerun-if-changed=../../proto/market_data.proto");
    println!("cargo:rerun-if-changed=../../proto/orders.proto");

    // Define the paths to your proto files
    let market_data_proto = "../../proto/market_data.proto";
    let orders_proto = "../../proto/orders.proto";

    // Configure tonic_build
    tonic_build::configure()
        // Add custom attributes if needed (e.g., derive serde::Serialize)
        // .type_attribute(".", "#[derive(serde::Serialize, serde::Deserialize)]")
        // Compile the specified proto files
        .compile(
            &[market_data_proto, orders_proto], // List of proto files
            &["../../proto"],                   // Directory to search for includes
        )?;

    Ok(())
}

// --- Placeholder: Protocol Buffer Definitions ---
// You would create these files:
// File: ../../proto/market_data.proto
/*
syntax = "proto3";

package marketdata;

import "google/protobuf/timestamp.proto";

// Service definition for sending market data
service MarketDataBroadcaster {
  // Sends a stream of ticks to subscribers (e.g., Indicator Engine)
  rpc StreamTicks (stream Tick) returns (stream TickAck); // Example bi-di stream
  // Sends a stream of quotes
  rpc StreamQuotes (stream Quote) returns (stream QuoteAck);
}

// Represents a single trade event
message Tick {
  string symbol = 1;
  google.protobuf.Timestamp timestamp = 2;
  double price = 3;
  int64 size = 4;
  string exchange = 5; // e.g., "SIP", "CBSE"
  repeated string conditions = 6; // Trade conditions if available
  string tape = 7; // Tape identifier
  int64 trade_id = 8; // Unique trade ID if available
}

// Represents a quote update
message Quote {
  string symbol = 1;
  google.protobuf.Timestamp timestamp = 2;
  double bid_price = 3;
  int64 bid_size = 4;
  string bid_exchange = 5;
  double ask_price = 6;
  int64 ask_size = 7;
  string ask_exchange = 8;
  repeated string conditions = 9; // Quote conditions if available
  string tape = 10; // Tape identifier
}

// Acknowledgement messages (optional, depends on streaming pattern)
message TickAck {
  string correlation_id = 1; // ID to correlate with sent Tick
  bool received = 2;
}

message QuoteAck {
  string correlation_id = 1;
  bool received = 2;
}
*/

// File: ../../proto/orders.proto
/*
syntax = "proto3";

package orders;

import "google/protobuf/timestamp.proto";

// Service definition for receiving order requests
service OrderReceiver {
  // Receives a request to place an order
  rpc PlaceOrder (OrderRequest) returns (OrderResponse);
  // Receives a request to cancel an order
  rpc CancelOrder (CancelRequest) returns (CancelResponse);
  // Could also have streaming status updates, etc.
}

enum OrderSide {
  ORDER_SIDE_UNSPECIFIED = 0;
  BUY = 1;
  SELL = 2;
}

enum OrderType {
  ORDER_TYPE_UNSPECIFIED = 0;
  MARKET = 1;
  LIMIT = 2;
  STOP = 3;
  STOP_LIMIT = 4;
  TRAILING_STOP = 5;
}

enum TimeInForce {
  TIME_IN_FORCE_UNSPECIFIED = 0;
  DAY = 1; // Day order
  GTC = 2; // Good 'til canceled
  OPG = 3; // Market on open
  CLS = 4; // Market on close
  IOC = 5; // Immediate or cancel
  FOK = 6; // Fill or kill
}

message OrderRequest {
  string client_order_id = 1; // Unique ID generated by the client (strategy engine)
  string symbol = 2;
  double quantity = 3; // Can be fractional for crypto/stocks
  OrderSide side = 4;
  OrderType type = 5;
  TimeInForce time_in_force = 6;
  optional double limit_price = 7; // Required for LIMIT, STOP_LIMIT
  optional double stop_price = 8;  // Required for STOP, STOP_LIMIT, TRAILING_STOP
  optional double trail_price = 9; // Required for TRAILING_STOP (price)
  optional double trail_percent = 10; // Required for TRAILING_STOP (percent)
  optional bool extended_hours = 11; // Allow trading outside regular hours
  // Add other necessary fields (e.g., order class, position intent)
}

message OrderResponse {
  string client_order_id = 1;
  string server_order_id = 2; // ID assigned by the exchange/broker
  OrderStatus status = 3;
  google.protobuf.Timestamp created_at = 4;
  optional string message = 5; // Error message if failed
}

message CancelRequest {
  string client_order_id = 1; // ID of the order to cancel
  // OR
  string server_order_id = 2; // ID assigned by the exchange/broker
}

message CancelResponse {
  string client_order_id = 1;
  string server_order_id = 2;
  OrderStatus status = 3; // Should reflect cancellation status
  optional string message = 4;
}

// Simplified status, map Alpaca statuses here
enum OrderStatus {
  ORDER_STATUS_UNSPECIFIED = 0;
  PENDING_NEW = 1;
  ACCEPTED = 2;
  FILLED = 3;
  PARTIALLY_FILLED = 4;
  CANCELED = 5;
  REJECTED = 6;
  EXPIRED = 7;
  PENDING_CANCEL = 8;
}

*/

```
**Important:** You need to actually create the `.proto` files in the specified location (`../../proto/`) with the content shown in the comments above (or your own definition