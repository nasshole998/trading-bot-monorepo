// src/routes/dashboard/+page.ts
import { graphqlClient } from '$lib/graphql/client';
import { GetDashboardDataDocument } from '$lib/graphql/generated/graphql'; // Generated by graphql-codegen
import type { PageLoad } from './$types';

// This should come from config or user selection in a real app
// For now, use a placeholder/default account ID
const DEFAULT_ACCOUNT_ID = 'trading_account_1'; // **MATCH THIS WITH BFF CONFIG**

export const load: PageLoad = async ({ fetch }) => {
  try {
    // Fetch data for the dashboard using the query and account ID variable
    const data = await graphqlClient.request(GetDashboardDataDocument, { accountId: DEFAULT_ACCOUNT_ID });

    // Data will contain { accountState: AccountState | null, riskMetrics: RiskMetrics | null }

    // Handle potential null results if services are down or account not found
    if (!data.accountState) {
         console.warn(`Account state not found for account ID "${DEFAULT_ACCOUNT_ID}".`);
    }
     if (!data.riskMetrics) {
         console.warn(`Risk metrics not found for account ID "${DEFAULT_ACCOUNT_ID}".`);
     }


    return {
      accountState: data.accountState,
      riskMetrics: data.riskMetrics,
      error: null
    };
  } catch (error) {
    console.error('Error fetching dashboard data:', error);
    return {
      accountState: null,
      riskMetrics: null,
      error: 'Failed to load dashboard data.'
    };
  }
};

/*
Note:
You will need to run `npm run graphql-codegen` again after creating `dashboard.graphql`.
Update `codegen.yml` to ensure it picks up this new query file.
*/