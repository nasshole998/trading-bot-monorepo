// src/routes/backtests/[id]/+page.ts
import { graphqlClient } from '$lib/graphql/client';
import { GetBacktestDetailsDocument } from '$lib/graphql/generated/graphql'; // Generated by graphql-codegen
import type { PageLoad } from './$types';

export const load: PageLoad = async ({ params, fetch }) => {
  const backtestId = params.id; // Get the ID from the route parameters

  try {
    // Fetch detailed data from the GraphQL endpoint using the ID variable
    const data = await graphqlClient.request(GetBacktestDetailsDocument, { backtestId });

    // data will contain { backtest: Backtest | null }
    // We are querying for a single backtest by ID.
    // If not found, the result might be { backtest: null } or an error depending on resolver logic.
    // Let's assume the resolver returns null or an error if not found.

    if (!data.backtest) {
        // Handle case where backtest with this ID is not found
         return {
            backtestId,
            error: `Backtest with ID "${backtestId}" not found.`,
            details: null // Explicitly set details to null
         };
    }


    return {
      backtestId, // Pass the ID back
      details: data.backtest, // Pass the detailed backtest data
      error: null
    };
  } catch (error) {
    console.error(`Error fetching backtest details for ID "${backtestId}":`, error);
    return {
      backtestId,
      error: `Failed to load backtest details for ID "${backtestId}".`,
      details: null
    };
  }
};