// src/routes/backtests/+page.ts
import { graphqlClient } from '$lib/graphql/client';
import { ListBacktestsDocument } from '$lib/graphql/generated/graphql'; // Generated by graphql-codegen
import type { PageLoad } from './$types';

export const load: PageLoad = async ({ fetch }) => {
  try {
    // Fetch data from the GraphQL endpoint
    // Use the SvelteKit `Workspace` function to inherit cookies etc.
    // Pass the fetch function to graphqlClient or use a custom fetch
    // For simplicity with graphql-request, we'll use the global fetch or a direct call.
    // A more integrated approach might pass 'fetch' explicitly if needed for server-side loading context.
    // For now, assuming graphqlClient uses global fetch implicitly or we don't need SvelteKit's fetch features here.

    const data = await graphqlClient.request(ListBacktestsDocument);

    return {
      backtests: data.listBacktests
    };
  } catch (error) {
    console.error('Error fetching backtests:', error);
    return {
      backtests: [], // Return empty array on error
      error: 'Failed to load backtests.' // Add error message
    };
  }
};

/*
Note:
The `ListBacktestsDocument` is generated by `graphql-codegen`.
You need to run `npm run graphql-codegen` after setting up `codegen.yml`.

Example `codegen.yml` in frontend root:
```yaml
# codegen.yml
schema: "http://localhost:8080/query" # Point to your BFF's GraphQL endpoint
documents: "src/**/*.graphql"         

generates:
  ./src/lib/graphql/generated/graphql.ts:
    plugins:
      - "typescript"
      - "typescript-operations"
      - "graphql-request" 
    config:
      documentMode: string 
      **`trading-bot-monorepo/ui-sveltekit-typescript/frontend/src/routes/backtests/+page.svelte` (New)**

      ```svelte
      <script lang="ts">
          import type { PageData } from './$types';
      
          // PageData contains the data returned by the load function
          export let data: PageData;
      
          // Access the backtests array from the loaded data
          const { backtests, error } = data;
      </script>
      
      <h1>Backtest Runs</h1>
      
      {#if error}
          <p style="color: red;">{error}</p>
      {:else if backtests && backtests.length > 0}
          <table>
              <thead>
                  <tr>
                      <th>ID</th>
                      <th>Strategy Name</th>
                      <th>Symbol</th>
                      <th>Start Time</th>
                      <th>End Time</th>
                      <th>Success</th>
                  </tr>
              </thead>
              <tbody>
                  {#each backtests as backtest (backtest.id)}
                      <tr>
                          <td>{backtest.id}</td>
                          <td>{backtest.strategyName}</td>
                          <td>{backtest.symbol}</td>
                          <td>{backtest.startTime}</td>
                          <td>{backtest.endTime}</td>
                          <td>{backtest.success ? 'Yes' : 'No'}</td>
                          </tr>
                  {/each}
              </tbody>
          </table>
      {:else}
          <p>No backtest runs found.</p>
      {/if}
      
      <style>
          /* Basic table styling */
          table {
              width: 100%;
              border-collapse: collapse;
              margin-top: 1rem;
          }
          th, td {
              border: 1px solid #ddd;
              padding: 8px;
              text-align: left;
          }
          th {
              background-color: #f2f2f2;
          }
      </style>