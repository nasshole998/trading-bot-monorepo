STRATEGY SimpleMACrossover;

# This strategy buys when a fast SMA crosses above a slow SMA
# and sells when the fast SMA crosses below the slow SMA.
# It uses state variables (position) to avoid repeated orders.
# Assumes indicators "SMA_20_BTCUSDT" and "SMA_50_BTCUSDT" are available.

# State variable: 0 = no position, 1 = long (bought), -1 = short (sold - not strictly implemented here)
VAR position = 0;

ON DataUpdate("btc_usdt") { # ON is ignored by the interpreter, strategy runs on any data for btc_usdt
    # Get current and previous indicator values
    # Assumes the data manager provides enough history (max_history_size >= 2)
    # Using the `.prev` syntax requires the DataManager to efficiently provide the second latest value.

    # Ensure indicators exist before accessing them
    # The type checker should handle this, but runtime check is safer
    IF Indicator("SMA_20_BTCUSDT") <> NaN AND Indicator("SMA_50_BTCUSDT") <> NaN AND
       Indicator("SMA_20_BTCUSDT").prev <> NaN AND Indicator("SMA_50_BTCUSDT").prev <> NaN
    THEN {
        SET fast_sma = Indicator("SMA_20_BTCUSDT");
        SET slow_sma = Indicator("SMA_50_BTCUSDT");
        SET fast_sma_prev = Indicator("SMA_20_BTCUSDT").prev;
        SET slow_sma_prev = Indicator("SMA_50_BTCUSDT").prev;

        # Check BUY signal: Fast SMA crosses above Slow SMA AND not currently long
        # Crossover condition: current fast > current slow AND previous fast <= previous slow
        IF fast_sma > slow_sma AND fast_sma_prev <= slow_sma_prev AND position == 0 THEN {
            # Execute BUY action with a fixed quantity (e.g., 0.001 BTC)
            BUY 0.001; # Quantity expression can be used here, e.g., BUY (account_balance * 0.1 / current_price)
            Log("BUY signal triggered: Fast SMA crossed above Slow SMA."); # Log the event
            SET position = 1; # Update state to indicate we are now long
        } ELSE IF fast_sma < slow_sma AND fast_sma_prev >= slow_sma_prev AND position == 1 THEN {
            # Check SELL signal: Fast SMA crosses below Slow SMA AND currently long
            # Crossover condition: current fast < current slow AND previous fast >= previous slow
            SELL 0.001; # Execute SELL action with the same quantity (simplistic exit)
            Log("SELL signal triggered: Fast SMA crossed below Slow SMA."); # Log the event
            SET position = 0; # Update state to indicate we are now flat
        } ELSE {
            # Do nothing if no clear crossover or already in desired position
            HOLD;
            # Log("HOLD (no signal or already in position)."); # Can be noisy, comment out in production
        }
    } ELSE {
        # Not enough data for crossover check
        HOLD;
        Log("HOLD (not enough data for SMA crossover check).");
    }
    # Optional: Log current state and values for debugging
    # Log(position);
    # Log(fast_sma);
    # Log(slow_sma);
    # Log(fast_sma_prev);
    # Log(slow_sma_prev);
}