syntax = "proto3";

package risk_management;

import "google/protobuf/timestamp.proto";
import "market_data.proto"; // For OrderSide, OrderType, OrderStatus

// Service for evaluating trading actions against risk rules
service RiskManagementService {
  // RPC to evaluate a trading action (e.g., from Strategy Engine)
  // This is the main entry point for actions needing risk checks.
  rpc EvaluateAction(EvaluateActionRequest) returns (EvaluateActionResponse);

  // Optional: RPC for external services to push updates to the Risk Manager
  // (e.g., initial account state, periodic updates - Though subscribing is better)
  // rpc UpdateRiskState(RiskStateUpdate) returns (UpdateRiskStateResponse);
}

// Represents a request to evaluate a trading action
// Includes sufficient context for initial risk checks.
message EvaluateActionRequest {
  string strategy_name = 1; // Name of the strategy originating the action
  string client_action_id = 2; // Unique ID for this action from the client (Strategy Engine)
  string symbol = 3;           // Trading pair
  market_data.OrderSide side = 4; // BUY or SELL (HOLD and LOG actions might bypass Risk Manager)
  market_data.OrderType type = 5;  // MARKET, LIMIT, etc.
  string quantity = 6;         // Quantity (string for precision)
  string price = 7;            // Price (string, for LIMIT orders etc., can be "0" or missing for MARKET)
  google.protobuf.Timestamp timestamp = 8; // Timestamp of the action request

  // Include a snapshot of current relevant state from Strategy Engine for immediate checks
  // Note: Risk Manager will primarily rely on its *own* state updated from Account/Execution streams,
  // but client can provide recent context.
  // string current_equity_snapshot = 9; // Example snapshot field
  // string current_position_snapshot = 10; // Example snapshot field
}

// Represents the response after evaluating an action
message EvaluateActionResponse {
  string client_action_id = 1; // The ID from the request
  bool approved = 2;           // True if the action was approved, false if denied
  string reason = 3;           // Message explaining the decision (e.g., "Approved", "Denied: Exceeds position limit")
  google.protobuf.Timestamp timestamp = 4; // Timestamp of the decision
  // Add potential consequences like "adjusted_quantity", "adjusted_price" if rules can modify actions
}


// --- Definition for Execution Service RPC (owned by Data Ingestion) ---
// We define it here for clarity of the Risk Manager's outbound interaction.
// In a multi-component system, this should be defined in data-ingestion.proto
// and imported here. For this monorepo structure, we'll include it here
// and ensure data-ingestion-rust *also* uses this definition or a matching one.
// This is a placeholder for definition location consistency across components.

service ExecutionService {
  // RPC to request execution of an approved trading order.
  // The Risk Manager sends approved actions here.
  rpc ExecuteApprovedOrder(ExecuteApprovedOrderRequest) returns (ExecuteApprovedOrderResponse);
}

// Represents a request to execute an approved order sent from Risk Manager to Execution Service.
message ExecuteApprovedOrderRequest {
   string risk_manager_order_id = 1; // Unique ID generated by the Risk Manager for the approved order
   string client_action_id = 2; // The original action ID from the Strategy Engine
   string strategy_name = 3; // Name of the strategy
   string symbol = 4;
   market_data.OrderSide side = 5;
   market_data.OrderType type = 6;
   string quantity = 7;
   string price = 8;
   google/protobuf/timestamp.proto.Timestamp timestamp = 9;
   // Add other fields required by the execution module (e.g., exchange routing info, account ID)
   string account_id = 10; // Specify target account
}

// Represents the response from the Execution service after receiving the request.
// This doesn't guarantee order fill, just receipt/initial processing by Execution.
message ExecuteApprovedOrderResponse {
    string risk_manager_order_id = 1; // The ID from the request
    string exchange_order_id = 2; // The order ID assigned by the exchange (if placed), empty if not
    bool success = 3;            // True if the execution request was successfully processed by Execution service
    string message = 4;          // Details about the execution request result (e.g., "Order placed", "Validation failed")
    google/protobuf/timestamp.proto.Timestamp timestamp = 5;
    // Add initial order status if available from the execution module
    market_data.OrderStatus initial_status = 6;
}