syntax = "proto3";

package account_state;

import "google/protobuf/timestamp.proto";
import "market_data.proto"; // For OrderSide, OrderType, OrderStatus

// Service for providing real-time account state and execution reports.
// Data Ingestion or a dedicated Account Service would implement this.
service AccountStateService {
  // Server-streaming RPC to subscribe to real-time account state updates.
  rpc SubscribeToAccountUpdates(SubscribeToAccountUpdatesRequest) returns (stream AccountUpdate);

  // Server-streaming RPC to subscribe to execution reports/order fills.
  rpc SubscribeToExecutionReports(SubscribeToExecutionReportsRequest) returns (stream ExecutionReport);

  // **NEW:** RPC to get a one-time snapshot of the current account state.
  rpc GetAccountSnapshot(GetAccountSnapshotRequest) returns (AccountUpdate); // Reuse AccountUpdate message for snapshot
}

message SubscribeToAccountUpdatesRequest {
  string account_id = 1;
}

message AccountUpdate {
  string account_id = 1;
  google/protobuf/timestamp.proto.Timestamp timestamp = 2;
  string total_equity = 3;
  string total_capital = 4;
  repeated SymbolPosition positions = 5;
  repeated OpenOrder open_orders = 6;
}

message SymbolPosition {
    string symbol = 1;
    market_data.OrderSide side = 2;
    string quantity = 3;
    string avg_entry_price = 4;
    string unrealized_pnl = 5;
}

message OpenOrder {
    string exchange_order_id = 1;
    string client_order_id = 2;
    string symbol = 3;
    market_data.OrderSide side = 4;
    market_data.OrderType type = 5;
    market_data.OrderStatus status = 6;
    string quantity = 7;
    string filled_quantity = 8;
    string price = 9;
    google/protobuf/timestamp.proto.Timestamp placed_time = 10;
}

message SubscribeToExecutionReportsRequest {
  string account_id = 1;
}

message ExecutionReport {
  string account_id = 1;
  google/protobuf/timestamp.proto.Timestamp timestamp = 2;
  string exchange_order_id = 3;
  string client_order_id = 4;
  string symbol = 5;
  market_data.OrderSide side = 6;
  market_data.OrderStatus status = 7;
  string filled_quantity = 8;
  string cumulative_filled_quantity = 9;
  string fill_price = 10;
  string commission = 11;
  string commission_asset = 12;
  optional string realized_pnl = 14;
  string message = 13;
}

// **NEW:** Request to get a snapshot of the current account state.
message GetAccountSnapshotRequest {
  string account_id = 1; // Account ID for the snapshot
}