# .github/workflows/ci.yml
# Basic CI workflow for the trading bot monorepo
# This initial version focuses on the Rust component and Nix setup.
# It should be expanded as other components are developed.
name: Monorepo CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  nix-build-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-unstable # Or a specific pinned version
        extra_nix_config: |
          experimental-features = nix-command flakes
          accept-flake-config = true

    - name: Check Nix Flake evaluation
      run: nix flake check ./nix # Assuming central flake is in ./nix/flake.nix

    # Add steps here to build specific packages defined in the flake if needed
    # Example: Build the Rust data ingestion package
    # - name: Build Data Ingestion (Rust) via Nix
    #   run: nix build .#data-ingestion-rust

  rust-data-ingestion-checks:
    needs: nix-build-check # Depends on Nix setup being valid
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./data-ingestion-rust # Set working directory for rust steps

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
          accept-flake-config = true

    - name: Setup Rust Environment via Nix Shell
      # Use nix develop to enter the environment defined in the flake for this component
      # The '--command' runs the subsequent steps within that environment
      run: |
        echo "Entering Nix development shell for data-ingestion-rust..."
        nix develop ../nix#data-ingestion-rust --command bash -c '
          echo "Running checks inside Nix shell..."
          rustc --version
          cargo --version
          echo "Checking formatting..."
          cargo fmt -- --check
          echo "Running linter (Clippy)..."
          cargo clippy -- -D warnings # Fail on warnings
          echo "Building project..."
          cargo build --release --verbose
          echo "Running tests..."
          cargo test --verbose
          echo "Exiting Nix shell."
        '
      shell: bash

  # --- Placeholder for other component checks ---
  # cpp-indicator-engine-checks:
  #   needs: nix-build-check
  #   runs-on: ubuntu-latest
  #   steps:
  #     # ... checkout, install nix ...
  #     - name: Build and Test C++ Indicator Engine
  #       run: |
  #         nix develop ../nix#indicator-engine-cpp --command bash -c '
  #           mkdir build && cd build
  #           cmake .. -GNinja
  #           ninja
  #           ctest # Assuming tests are set up with CTest
  #         '

  # Add jobs for Julia, Go, OCaml, F#, Lisp, TS/SvelteKit components here...

