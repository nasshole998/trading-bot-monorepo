// src/Simulation/SimulationTypes.fs
module BacktesterFsharp.Simulation.SimulationTypes

open System
open System.Collections.Generic
open BacktesterFsharp.Dsl.Ast // Needs DSL types
open MarketDataPb // Needs Protobuf types for OrderSide, OrderType, OrderStatus
open MlPredictionPb // Needs PredictionValue
open System.Linq // For ToDictionary

// Represents a single historical data point used in simulation
type DataPoint = {
    Timestamp: DateTimeOffset
    Price: decimal
    Volume: decimal
    Symbol: string // Symbol might be useful here too
    // Add other data fields if needed (e.g., bid/ask for quotes, specific indicator values if not using separate history)
}

// Represents the state of a simulated account
type AccountState = {
    mutable Capital: decimal // Current capital (cash)
    mutable Position: decimal // Current position (quantity of asset held)
    mutable HoldingValue: decimal // Current market value of the holding (Position * current Price)
    mutable TotalFeesPaid: decimal // Accumulated fees
    mutable RealizedProfitLoss: decimal // Accumulated P/L from closed trades
    mutable UnrealizedProfitLoss: decimal // Current P/L on open position (HoldingValue - Position * AvgEntryPrice)
    mutable AvgEntryPrice: decimal // Average price of the current position
    mutable PeakEquity: decimal // Highest equity reached (Capital + HoldingValue) for drawdown calculation
    mutable MaxDrawdown: decimal // Maximum drawdown encountered (PeakEquity - CurrentEquity)
    mutable EquityHistory: (DateTimeOffset * decimal) list // List of (Timestamp, Equity) tuples for metrics
}

// Represents a simulated trade event (entry or exit)
type SimulatedTrade = {
    Timestamp: DateTimeOffset
    Symbol: string
    Side: MarketDataPb.OrderSide // Buy or Sell execution
    Price: decimal // Execution price
    Quantity: decimal // Executed quantity
    Fee: decimal // Fee paid for this part of the trade
    RelatedOrderId: string // Link to the simulated order that caused this trade
    RealizedPnl: decimal option // P/L if this trade closes a position (only for exit trades)
}

// Represents the state of a simulated order
type SimulatedOrder = {
    ClientOrderId: string // Unique ID generated by the client (Backtester simulation)
    StrategyName: string // The strategy that placed the order
    Symbol: string
    Side: MarketDataPb.OrderSide
    OrderType: MarketDataPb.OrderType
    Quantity: decimal // Total requested quantity
    Price: decimal option // Price for Limit orders
    PlacedTime: DateTimeOffset
    mutable Status: MarketDataPb.OrderStatus // Current status
    mutable FilledQuantity: decimal // Quantity filled so far
    mutable AvgFillPrice: decimal // Average price of filled quantity
    mutable CumulativeCommission: decimal // Accumulated commission for this order
    // Add other fields like time_in_force if needed
}

// Main simulation state passed around
type SimulationState = {
    mutable Account: AccountState
    mutable TradeHistory: SimulatedTrade list // Use List.rev after simulation for chronological order
    mutable ActiveOrders: Dictionary<string, SimulatedOrder> // Track active simulated orders by ClientOrderId
    mutable HistoricalData: DataPoint list // All historical market data points (sorted by timestamp)
    mutable CurrentDataIndex: int // Index of the currently processed data point
    InitialCapital: decimal
    Strategy: Strategy // The parsed strategy AST
    // Add historical indicator/prediction data here, perhaps indexed or as dictionaries keyed by name
    IndicatorsData: Dictionary<string, DataPoint list> // Indicator history (name -> list of points)
    PredictionsData: Dictionary<string, DataPoint list> // Prediction history (name -> list of points)
    MlPredictions: Dictionary<string, Dictionary<DateTimeOffset, PredictionValue>> // prediction_type -> (Timestamp -> PredictionValue)
}

// Represents the environment passed to the DSL interpreter
// Contains necessary data and state for expression evaluation and statement execution
type BacktesterInterpreterEnvironment = {
    Vars: Dictionary<string, Value> // Strategy state variables (mutable copy)
    IndicatorsHistory: Dictionary<string, DataPoint list> // Indicator history (name -> list of points)
    PredictionsHistory: Dictionary<string, DataPoint list> // Prediction history (name -> list of points)
    MlPredictions: Dictionary<string, Dictionary<DateTimeOffset, PredictionValue>> // Pass ML predictions
    // Add Order Update history here if needed by DSL - not integrated into interpreter env yet
    Symbol: string // Symbol the strategy is running on
    CurrentTime: DateTimeOffset // Current simulation time
    CurrentPrice: decimal // Current market price
}